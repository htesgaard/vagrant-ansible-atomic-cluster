---
- hosts: kubernetes-all
  become: true
  become_user: root
  tasks:
    - name: Restore backup
      copy:
        src: /etc/kubernetes/config.orig
        dest: /etc/kubernetes/config
        remote_src: true

    # Shared Configuration for all Kubernetes Services in the file /etc/kubernetes/config
    - name: Shared configuration - KUBE_LOGTOSTDERR - logging to stderr means we get it in the systemd journal
      lineinfile:
        dest: "/etc/kubernetes/config"
        regexp: '^KUBE_LOGTOSTDERR='
        line: 'KUBE_LOGTOSTDERR="--logtostderr=true"'

    - name: Shared configuration - KUBE_LOG_LEVEL -journal message level, 0 is debug
      lineinfile:
        dest: "/etc/kubernetes/config"
        regexp: '^KUBE_LOG_LEVEL='
        line: 'KUBE_LOG_LEVEL="--v=0"'

    - name: Shared configuration - KUBE_ALLOW_PRIV - Should this cluster be allowed to run privileged docker containers
      lineinfile:
        dest: "/etc/kubernetes/config"
        regexp: '^KUBE_ALLOW_PRIV='
        line: 'KUBE_ALLOW_PRIV="--allow-privileged=true"'

    - name: Shared configuration - Configure KUBE_MASTER - How the replication controller and scheduler find the apiserver
      lineinfile:
        dest: "/etc/kubernetes/config"
        regexp: '^KUBE_MASTER='
        line: 'KUBE_MASTER="--master=http://{{ master_ip }}:8080"'

- hosts: kubernetes-masters
  become: true
  become_user: root
  tasks:

    # Configure the Kubernetes API Server
    # https://kubernetes.io/docs/admin/kube-apiserver/
    - name: Configure KUBE_ETCD_SERVERS
      lineinfile:
        dest: "/etc/kubernetes/apiserver"
        regexp: '^KUBE_ETCD_SERVERS='
        line: 'KUBE_ETCD_SERVERS="--etcd_servers=http://{{ master_ip }}:2379"'

    # TODO: make components talk to the api securely, remove --insecure-bind-address argument - https://kubernetes.io/docs/admin/accessing-the-api/
    - name: Configure KUBE_API_ADDRESS
      lineinfile:
        dest: "/etc/kubernetes/apiserver"
        regexp: '^KUBE_API_ADDRESS='
        # '--bind-address' relates to 'secure-port' and '--insecure-bind-address' to 'insecure-port'
        line: 'KUBE_API_ADDRESS="--bind-address=0.0.0.0  --insecure-bind-address=0.0.0.0"'

    - name: Configure KUBE_API_PORT
      lineinfile:
        dest: "/etc/kubernetes/apiserver"
        regexp: '^KUBE_API_PORT='
        line: 'KUBE_API_PORT="--secure-port=6443 --insecure-port=8080"'

    # Cluster-IP range used for services. These IPs are the internal IPs
    # KUBE_SERVICE_ADDRESSES:
    # The address range is used by Kubernetes to assign to Kubernetes services.
    # - In the example just shown, the address range of 10.254.0.0/16 consumes a set of 10.254 subnets that can be assigned by Kubernetes as needed. For example, 10.254.1.X, 10.254.2.X and so on.
    # - Make sure this address range isn’t used anywhere else in your environment.
    # - Each address range that is assigned is only used within a node and is not routable outside of that node.
    # - This address range must be different than the range used by flannel. (Flannel address ranges are assigned to pods.)
    #
    - name: Configure KUBE_SERVICE_ADDRESSES
      lineinfile:
        dest: "/etc/kubernetes/apiserver"
        regexp: '^KUBE_SERVICE_ADDRESSES='
        #line: 'KUBE_SERVICE_ADDRESSES="--portal_net=10.254.0.0/16"'
        #line: 'KUBE_SERVICE_ADDRESSES="--portal_net=10.0.0.0/16"'
        line: 'KUBE_SERVICE_ADDRESSES="--service-cluster-ip-range=172.29.0.0/16"' #--service-cluster-ip-range formerly --portal_net
        # etcdctl rm /registry/services/specs/default/kubernetes


    - name: Copy Basic-Auth credentials CSV file
      copy:
        src: "{{ playbook_dir }}/resource/k8s_bafile.csv"
        dest: '/etc/kubernetes/k8s-bafile.csv'

    # We’ll also add parameters for the certificates we generated earlier.
    # Add your own certs!
    - name: Configure KUBE_API_ARGS
      lineinfile:
        dest: "/etc/kubernetes/apiserver"
        regexp: '^KUBE_API_ARGS='
        line: 'KUBE_API_ARGS="--tls-cert-file=/etc/kubernetes/certs/apiserver.crt --tls-private-key-file=/etc/kubernetes/certs/apiserver.key --client-ca-file=/etc/kubernetes/certs/ca.crt --service-account-key-file=/etc/kubernetes/certs/apiserver.key --basic-auth-file=/etc/kubernetes/k8s-bafile.csv"'

    - name: Configure KUBE_CONTROLLER_MANAGER_ARGS
      lineinfile:
        dest: "/etc/kubernetes/controller-manager"
        regexp: '^KUBE_CONTROLLER_MANAGER_ARGS='
        line: 'KUBE_CONTROLLER_MANAGER_ARGS="--service-account-private-key-file=/etc/kubernetes/certs/apiserver.key --root-ca-file=/etc/kubernetes/certs/ca.crt"'


    - name: Enable and start kube-controller-manager
      systemd:
        name: kube-controller-manager
        enabled: yes
        state: restarted
        daemon_reload: yes

    # sudo systemctl restart kube-apiserver
    - name: Enable and start kube-apiserver
      systemd:
        name: kube-apiserver
        enabled: yes
        state: restarted
        daemon_reload: yes

    - name: Enable and start kube-scheduler
      systemd:
        name: kube-scheduler
        enabled: yes
        state: started
        daemon_reload: yes

